= Eurochance Course Implementation =

The Eurochance language course (see http://eurochance.brailcom.org) was the
initial implementation of a course using the LCG framework.  Thus the LCG
sources contain an implementation of the Eurochance course structure in a
separate module.  This can serve as an example for creation of other projects
with the LCG.

This document includes the description of the course structure for Eurochance
courses as well as a guide for input data creation.

== Eurochance Course Structure == structure

A course consists of a certain number of units (for instance 15 units for
the Intermediate course).  Each unit is focused on certain topic (e.g. finance,
catering etc.).

Each unit has the same structure.  It consists of five sections.

The sections are: @TOC@


=== Aims and Objectives ===

This sections is a brief outline of the focus of the unit.  The contents is a
structured text -- paragraphs, bullet lists etc.


=== Vocabulary ===

Consists of a listing of vocabulary for the unit.  User can read each piece of
vocabulary separately, hear the correct pronunciation (recorded by native
speaker) and read the translation into his mother tongue.

User can browse the vocabulary up and down and search for a concrete word
(by the means of the browser).


=== Grammar ===

This section contains grammar explanations for the unit.  These explanations
are written as structured text.

Multiple sections should be used to allow direct access to certain parts from
the Table of Contents and the Grammar Index.


=== Exercises ===

This section consists of five subsections.  Each subsection consists of a
series of exercises.  The subsections are:

  * Section 1: Vocabulary Practice
  * Section 2: Listening Comprehension
  * Section 3: General Comprehension
  * Section 4: Grammar Practice
  * Section 5: Consolidation

There is a predefined set of exercise types that can be used.  The order and
number of exercises does not matter as long as the types are respected, however
it is advisable to stick to certain convention for better user's orientation.

The detailed description of exercise types and their content can be found in
the section [#exercise-types].


=== Checklist ===

This is a short section of structured text.  Most often this will be an
itemised list of the competences achieved in the unit.



== Input Data Formats ==

To be able to process the input data with a computer program (the LCG) we must
define a set of rules how this data are represented.  This chapter describes
these data formats.

Table of Contents: @TOC@

=== Basics ===

All LCG source files are plain text files (except for the sound files described
in the section [#recordings]).  Thus you can edit them using any text editor.
A simple editor, such as Notepad in MS Windows should do the job.  The only
requirement is that you must be able to save the output file in *UTF-8
encoding* or convert it to this encoding afterwards.

The basic concept is based on files arranged into directories (folders)
according to the logical structure of the course (see also the
[#structure] specification).

There is one /base directory/ for the whole course.  This directory contains
one /subdirectory/ for each unit of the course.  Each of these subdirectories
contains files and subdirectories defining the content of the sections within
the unit.  The input format for different sections may differ, depending on the
type of the content used within the section.  Later sections of this document
describe the format of each part individually.

Now, let's get back to the structure of units.  The subdirectories can be named
arbitrarily.  The only important thing is that the units are ordered according
to the alphabetical order of the names of their directories.  Thus it is
advisable to prefix the names by a number of the unit and then any name
describing the focus of the lesson for better orientation.

*An example of the recommended naming scheme for the subdirectories:*

  * 01-telephoning
  * 02-office-admin
  * 03-financial
  * 04-hotels
  * 05-tourism
  * ...


=== Text Sections ===

According to the [#structure], there are several sections
comprising a ``structured text'' in each unit.  For each of these sections, the
LCG will expect a text file in unit source directory.

The following table shows the name of the input file for each of the text
sections.  

| *Section*           | *File*          |
| Aims and Objectives | =aims.txt=      |
| Grammar             | =grammar.txt=   |
| Checklist           | =checklist.txt= |

The input text files use the Wiki formatting.  This is a very simple and
straightforward set of rules how to format a plain text document.  The
formatting allows to mark the logical structure of sections, paragraphs,
itemised lists etc.  A brief description follows.


==== Paragraphs ====

A paragraph is each continual set of rows of text.  Whenever you leave a blank
line, you start a new paragraph.  The line-breaks within the paragraph are
ignored, since the paragraph will be reformatted to fit into the browser
window.

It is recommended to wrap the paragraphs not to exceed 80 characters in width.


==== Itemised Lists ====

Itemised lists are marked by an asterisk at the beginning of each item.  Each
item is indented by a space.

*Example:*

------
This is a normal paragraph.  The itemised list follows.

 * can
 * may
 * must
------


==== Sections ====

A section starts with a sections header.  The header is marked by a section
title surrounded by the equation signs (at least two).  The number of the
equation signs determines the level.
	 
*Example:*

------
 == This is the main heading ==

 The paragraphs below belong to the first section.

 === Subsection Heading ===

 This paragraph belongs to the subsection of the first section.

 == A second section ==

 This is a second section on the same level as the first one.
----- 

The main purpose of the sections is to have an additional logical structure
within the text sections.  All the sections will appear in the Table of
Contents (reflecting their hierarchy).  Thus sections should be used as much as
possible in the grammar explanations to allow direct access to certain points
from the table of contents.  Also links from within the exercises can be
targeted to a particular subsection of the Grammar section.


==== Citations ====

Within the Grammar explanations, there are often words or structures, which can
be considered citations.  They can be recognised easily: Even after translating
the grammar explanations into another language, these words or structures will
still remain in English (or German for the German course).

Example (with the citations in italics): 

The modal auxiliary verbs (>>can, could, must, may, might, shall, should, will,
would<<) have only one form.  There are also short affirmative forms for
>>shall<< (>>'ll<<) >>will<< (>>'ll<<) and >>would<< (>>'d<<)

The citations must be marked by surrounding them into double angle brackets
like this: =!>>word!<<=.  The paragraph above would be written like this:

-----
The modal auxiliary verbs (>>can, could, must, may, might, shall, should, will,
would<<) have only one form.  There are also short affirmative forms for
>>shall<< (>>'ll<<) >>will<< (>>'ll<<) and >>would<< (>>'d<<)
-----


=== Vocabulary ===

All the vocabulary is stored in plain text files.  There is one file for each
unit and each target language (Norwegian, Czech, Slovak, German, Spanish, ...).
In other words, one vocabulary file contains vocabulary for one unit and one
target language.

Initially only one vocabulary file per unit is created (the English/German one)
without translations.  Then, the translators add the translations into this
file and upload it to the source directory with a different filename.

The name of the initial vocabulary file (without translations) is
=vocabulary.txt=.  There must be one file of that name in each unit's source
directory.

The translation files are then named according to the following table:

| *Language* | *Filename*          |
| Czech      | =vocabulary.cs.txt= | 
| English    | =vocabulary.en.txt= (for the German course only) |
| German     | =vocabulary.de.txt= (for the English course only) |
| Norwegian  | =vocabulary.no.txt= |
| Slovak     | =vocabulary.sk.txt= |
| Spanish    | =vocabulary.es.txt= |


Each vocabulary file consists of word pairs (English term, translation into the
target language).  For the courses of German language, the pairs are (German
term, the translation).  Each pair is on a separate line.  The line starts with
the English term (may be followed by a note in round brackets).  The
translation should follow after the separator "::" - a double colon.  Blank
characters (spaces, tabs) before and after the separator and at the beginning
and end of the line are ignored.

Example (using Czech translations):

-----
call :: volat, hovor
ring :: zvonit
cell-phone (U.S.) :: mobilnĂ­ telefon, mobil
...
-----

All lines beginning with a hash "#" are comments (ignored).

Sometimes the vocabulary defines also phrases.  The LCG needs to be able to
recognise phrases (for example to be able to generate a global listing of
vocabulary and phrases) so all the phrases should go to the end of the
vocabulary file and the beginning of the phrases section should be separated by
a line with the comment "phrases" like this:

-----
to switch off :: odpojit, vypnout
tone :: tón
yellow pages :: zlaté stránky
# phrases :: 
Can I speak to ...? :: Mohu prosím mluvit s ...?
Can I help you? :: Mohu Vám nějak pomoci?
Can I take a message? :: Mohu převzít vzkaz?
-----


=== Exercises ===

According to the [#structure] specification, there are
five sections of exercises in each unit.  All these sections are defined in the
same file.  This file is named '=exercises.txt=' and it is again located within
each unit's source directory.


==== Exercise Specification File Format ====

The exercise specification consists of a series of specifications of individual
exercises.  The number of exercises is not restricted.  The exercises will be
generated on the output in the same order in which they appear in the
specification file.  The only restriction is, that the exercises must be split
into five sections.  It is in the responsibility of the author to stick to some
rules making the types and number of exercises within each section consistent
throughout the course.

So, technically, the individual exercise specifications are separated by a line
containing four or more dashes.  When the next sections begins, a separator of
four or more equation signs must be used.

*Example:*

-----
First exercise specification

----

Second exercise specification

====

First exercise in the second section

----

Second exercise in the second section

----

etc.
-----

Blank lines around the separators are omitted.  To have five sections in each
exercise specification file, there must be exactly four section separators.
There is no additional separator after the last exercise specification.  Each
section must contain at least one exercise (technically).


==== Format of an Individual Exercise Specification ====

Each individual exercise specification consists of a header and a series of
tasks.  The header defines some necessary information about the exercise type,
media files it depends on etc.  Tasks define the corresponding questions or
goals depending on the exercise type.

Header and individual tasks are separated by a blank line.  For each exercise,
there is just one header at the beginning and an unlimited number of tasks
following.

In the example below, you can see a concrete header and tasks for a concrete
exercise type.

*Example:*

-----
type: MulitpleChoiceQuestions
sound_file: conversation1.ogg
transcript: conversation1.txt

What does the woman want to buy?
- Some clothes.
+ Some books.
- Some cakes.

Where does she want to buy the books from?
- Germany.
- England.
+ America.

What does the cashier recommend her to do?
+ Make a transfer.
- Use her credit card.
- Send cash.
-----

/Details about line length:/ Line length is unlimited, but it is recommended to
wrap the text not to exceed 80 columns width.  However you can only wrap
certain types of lines.  For example exercise header lines can not be wrapped
and also certain types of exercises expect their tasks as distinct lines.
See the exercise format specifications for more details.


==== Exercise Header ====

Exercise header consists of name/value pairs written each on one line.  The
header name begins at the beginning of the line and ends by a colon.  The colon
is followed by a space and the corresponding value.

You can see an example of an exercise header at the previous section.

Exercise header arguments:

  * =type= ... This argument is mandatory.  See the list of all possible
    [#exercise-types].
  
  * =audio_version= ... Any exercise may also be available in the purely
    oral!/aural version.  In such a case you supply a name of the file with the
    corresponding recording.  This argument is not mandatory.
  
  * =sound_file= ... When the exercises is based on a listening, you specify
    the name of the file with the recording here.  This argument is not
    mandatory.

  * =transcript= ... When ='sound_file'= is defined, you must also define the
    name of the file with a textual transcript of that recording.

The difference between the /recording/ and the /audio n version/ should be
obvious.  First the user listens to the recording (if there is one) and than he
decides if he wants to do the written tasks (filling in texts or choosing from
predefined answers interactively) or to do the same tasks purely
aurally!/orally (just listening to the questions and answering orally).

That's also why there is no transcript for the ='audio_version'= argument,
since the interactive version of the exercise also serves as a transcript.


==== Exercise Types ==== exercise-types

The exercise type determines the type of the tasks expected in the source file
after the header and a way of their interpretation.  For each exercise, all the
tasks must be of the same type.  

Exercise Types Overview: @TOC@

A brief description of each exercise type follows.


===== TrueFalseStatements =====

A sequence of statements.  The user is expected to indicate whether the
sentence is true or false.  This is mostly useful in a combination with a
recording to test the comprehension.

The specification consists of a sentence and a ![T] or ![F] mark at
the end to indicate the correct answer.

*Task specification example:*

-----
The Microsoft Windows operating system never crashes. [F]
-----


===== MultipleChoiceQuestions ===== MultipleChoiceQuestions

A sequence of questions with a predefined set of answers.  Also mostly useful
as a comprehension exercise (in combination with a recording).

User's goal is to choose the correct answer out of a list of predefined options.
The specification consists of the question (or prompt) and a sequence of
choices.  The question is specified at the first line and all the following
lines are the choices.  Each Choice must be prefixed by a plus or minus sign --
plus for a correct answer, minus for the incorrect ones.  Number of choices is
not limited, but only one choice can be defined as correct.

*Task specification example:*

-----
A screen reader is:
- A person.
- A device.
+ A program.
-----


===== GapFilling =====

Filling in the gaps in sentences by choosing the correct word from the list.

The specification is very similar to the [#MultipleChoiceQuestions]
specification, only instead of questions, there are sentences with gaps.  Each
sentence has just one gap marked by a sequence of four underscores.

*Task specification example:*

-----
If you want to send money to somebody, you can ____ a transfer.
- do
+ make
- have
-----


===== Cloze ===== Cloze

Filling in the gaps in text by typing the correct word.  Since the individual
pieces would often not make sense without the context, the cloze will usually
consist of a paragraph of text which can contain more than one gap.

It is recommended to use a cloze in a combination with a recording, so that the
user's goal is to fill in the exactly same words as he has heard before.  In
this case, there is just one correct answer and the automatic evaluation can
surely decide what is a correct answer and what is not.

You can also use a cloze without a recording, so that the user must find
the correct word according to the lexical context, but there is the risk, that
the student finds a different completion, than you expected, which might be
also correct.  Then the automatic evaluation would evaluate such an answer as
incorrect and the student would be confused.  So please take special care to
make the completions unambiguous.

In the input text, you simply put the words in square brackets to indicate,
that they should be replaced by a gap.  Than the /only/ correct answer for this
gap is the word in the brackets.


*Task specification example:*

-----
Commercial banks and savings banks receive and hold deposits [in] current
accounts, savings accounts and deposit accounts, make payments [for] their
customers, lend money, [and] offer investment advice, foreign exchange
facilities, and so on.
-----


===== Selections =====

The goal in this exercise is to decide which of the two (or possibly more)
sentences is correct.  The specification of one task consists of two (or more)
lines, one of which is marked by a plus sign and the other(s) by a minus sign.
The plus marked sentence is then considered correct and the other(s) incorrect.

*Task specification example:*

-----
+ She asked me to plant some flowers.
- She asked to me to plant some flowers.
-----

===== SentenceCompletion =====

Sentence completion exercise is designed to be purely aural!/oral so there are
no tasks in the specification file.  On the other hand, the ='audio_version'=
argument is mandatory for that exercise.

#Each task is one sentence.  There is just one gap in each sentence, to be
#filled in by the student.  Unlike in the [#Cloze], there are usually more words
#in the gap to be filled to finish the sentence.  The same warning applies here
##regarding the ambiguity as for the [#Cloze], so it is safer to use this
#exercise together with a listening again.

#*Task specification example:*

#-----
#If you don't use pesticides you can [grow organic food].
#-----

===== Transformation =====

The goal is to transform a given sentence according to the instructions, which
are a part of the recording. 

The task specification consists of two lines.  First line is the original
sentence and the second line is the transformed sentence.

*Task specification example:*

-----
Mr Hill said: "I don't grow bananas."
Mr Hill said he didn't grow bananas.
-----

===== Substitution =====

This is similar to Transformation, but the goal is to replace a part of the
original sentence with a different pattern.  This pattern is written in round
brackets after the original sentence on the first line.  The second line
contains the answer (substituted sentence).

*Task specification example:*

-----
Can you wait a moment, please? (Take a message.)
Can you take a message, please?
-----

===== Dictation =====

Task specification for the dictation is the text of the dictation as one
paragraph of text.  The recording is required for this exercise


=== Sound Recordings === recordings

==== Sound File Format ====

All sounds should be recorded digitally in the WAVe format with CD quality.
This means in particular:

  * Two channels (stereo)
  * Sampling frequency 44.1 kHz
  * 16 bits per sample.

These source data will be converted into an applicable output format in
reasonable quality by the technical group.

==== Segmentation ====

Each logical piece should be recorded as a separate file except for vocabulary,
since recording one very short file per one vocab item would be too difficult
and time consuming.

Vocabulary should be recorded into one file per unit.  There should be distinct
pauses between individual vocabulary items (one or two seconds).  These
recordings will be cut into pieces automatically.

All other recordings should be recorded separately -- one file per logical
unit.  For instance there will be one file for each listening exercise etc.

==== Delivery of the Recorded Data ====

The data should be burned on a CD when ready and sent to the technical group,
since it will be probably too large for transmission via the Internet.
