= Learning Content Generator Manual =

Tomas Cerha, 2004-05-19

This document describes the formats of data used on the input side of the
Learning Content Generator.  This data are then processed by the LCG.  The
result is an IMS compatible content package that can be used with any IMS
compliant Learning Management System.

Table of Contents: @TOC@

== Motivation ==

The LCG makes it possible to generate a content package in any output format
with any presentation without changing the input data and thus makes the
content and its presentation two independent issues.  It is easy to change the
whole appearance and user interface without any changes in the input data.

To be able to process the input data with a computer program (the LCG) we must
define the rules how this data are represented.  The computer program must be
able to recognise the logical elements of the content to be able to put them
together on its output, but on the other hand the content creators must not be
forced to deal with the technical aspects more than necessary.


== Basic Structure ==

The basic concept is based on files arranged into directories (folders)
according to the logical structure of the course (see also the
[structure.html|course structure] specification).

There is one /base directory/ for the whole course.  This directory contains
one /subdirectory/ for each unit of the course.  Each of these subdirectories
contains files and subdirectories defining the content of the sections within
the unit.  The input format for different sections may differ, depending on the
type of the content used within the section.  Later sections of this document
describe the format of each part individually.

Now, let's get back to the structure of units.  The subdirectories can be named
arbitrarily.  The only important thing is that the units are ordered according
to the alphabetical order of the names of their directories.  Thus it is
advisable to prefix the names by a number of the unit and then any name
describing the focus of the lesson for better orientation.

*An example of the recommended naming scheme for the subdirectories:*

  * 01-telephoning
  * 02-office-admin
  * 03-financial
  * 04-hotels
  * 05-tourism
  * ...

== Data Formats ==

All LCG source files are plain text files (except for the sound files described
in the section [#recordings]).  Thus you can edit them using any text editor.
A simple editor, such as Notepad in MS Windows should do the job.  The only
requirement is that you must be able to save the output file in *UTF-8
encoding* or convert it to this encoding afterwards.

== Text Sections ==

According to the [structure.html|course structure], there are several sections
comprising a ``structured text'' in each unit.  For each of these sections, the
LCG will expect a text file in unit source directory.

The following table shows the name of the input file for each of the text
sections.  

| *Section*           | *File*          |
| Aims and Objectives | =aims.txt=      |
| Key Grammar         | =grammar.txt=   |
| Checklist           | =checklist.txt= |

The input text files use the Wiki formatting.  This is a very simple and
straightforward set of rules how to format a plain text document.  The
formatting allows to mark the logical structure of sections, paragraphs,
itemised lists etc.  A brief description follows.

=== Paragraphs ===

A paragraph is each continual set of rows of text.  Whenever you leave a blank
line, you start a new paragraph.  The line-breaks within the paragraph are
ignored, since the paragraph will be reformatted to fit into the browser
window.

It is recommended to wrap the paragraphs not to exceed 80 characters in width.

=== Itemised Lists ===

Itemised lists are marked by an asterisk at the beginning of each item.  Each
item is indented by a space.

*Example:*

------
This is a normal paragraph.  The itemised list follows.

 * can
 * may
 * must
------

=== Sections ===

A section starts with a sections header.  The header is marked by a section
title surrounded by the equation signs (at least two).  The number of the
equation signs determines the level.

*Example:*

------
 == This is the main heading ==

 The paragraphs below belong to the first section.

 === Subsection Heading ===

 This paragraph belongs to the subsection of the first section.

 == A second section ==

 This is a secnod section on the same level as the first one.
----- 

The main purpose of the sections is to have an additional logical structure
within the text sections.  All the sections will appear in the Table of
Contents.  For example in the /Grammar explanations/ sections should be used to
allow direct access to certain parts from the table of contents and linking
these parts from within the exercises.

=== Citations ===

Within the Grammar explanations, there are often words or structures, which can
be considered citations.  They cen be recognized easily: Even after translating
the grammar explanations into another language, these words or structures will
still remain in English (or German for the German course).

Example (with the citations in italics): 

The modal auxiliary verbs (>>can, could, must, may, might, shall, should, will,
would<<) have only one form.  There are also short affirmative forms for
‘>>shall<<’ (>>'ll<<) ‘>>will<<’ (>>'ll<<) and ‘>>would<<’ (>>'d<<)

The citations must be marked by surrounding them into double angle brackets
like this: =!>>word!<<=.  The paragraph above would be written like this:

-----
The modal auxiliary verbs (>>can, could, must, may, might, shall, should, will,
would<<) have only one form.  There are also short affirmative forms for
‘>>shall<<’ (>>'ll<<) ‘>>will<<’ (>>'ll<<) and ‘>>would<<’ (>>'d<<)
-----


== Vocabulary ==

All the vocabulary is stored in plain text files.  There is one file for each
unit and each target language (Norwegian, Czech, Slovak, German, Spanish, ...).
In other words, one vocabulary file contains vocabulary for one unit and one
target language.

Initially only one vocabulary file per unit is created (the English/German one)
without translations.  Then, the translators add the translations into this
file and upload it to the source directory withe a different filename.

The name of the initial vocabulary file (without translations) is
=vocabulary.txt=.  There must be one file of that name in each unit's source
directory.

The translation files are then named according to the following table:

| *Language* | *Filename*          |
| Czech      | =vocabulary.cs.txt= | 
| English    | =vocabulary.en.txt= (for the German course only) |
| German     | =vocabulary.de.txt= (for the English course only) |
| Norwegian  | =vocabulary.no.txt= |
| Slovak     | =vocabulary.sk.txt= |
| Spanish    | =vocabulary.es.txt= |


Each vocabulary file consists of word pairs (English term, translation into the
target language).  For the courses of German language, the pairs are (German
term, the translation).  Each pair is on a separate line.  The line starts with
the English term (may be followed by a note in round brackets).  The
translation should follow after the separator "::" - a double colon.  Blank
characters (spaces, tabs) before and after the separator and at the beginning
and end of the line are ignored.

Example (using Czech translations):

-----
call :: volat, hovor
ring :: zvonit
cell-phone (U.S.) :: mobilní telefon, mobil
...
-----

All lines beginning with a hash "#" are comments (ignored).

Sometimes the vocabulary defines also phrases.  The LCG needs to be able to
recognize phrases (for example to be able to generate a global listing of
vocabulary and phrases) so all the phrases should go to the end of the
vocabulary file and the beginning of the phrases section should be separated by
a line with the comment "phrases" like this:

-----
to switch off :: odpojit, vypnout
tone :: tón
yellow pages :: zlaté stránky
# phrases :: 
Can I speak to ...? :: Mohu prosím mluvit s ...?
Can I help you? :: Mohu Vám nějak pomoci?
Can I take a message? :: Mohu převzít vzkaz?
-----


== Exercises ==

According to the [structure.html|course structure] specification, there are
five sections of exercises in each unit.  All these sections are defined in the
same file.  This file is named '=exercises.txt=' and it is again located within
each unit's source directory.

=== Exercise Specification File Format ===

The exercise specification consists of a series of specifications of individual
exercises.  The number of exercises is not restricted.  The exercises will be
generated on the output in the same order in which they appear in the
specification file.  The only restriction is, that the exercises must be split
into five sections.  It is in the responsibility of the author to stick to some
rules making the types and number of exercises within each section consistent
throughout the course.

So, technically, the individual exercise specifications are separated by a line
containing four or more dashes.  When the next sections begins, a sparator of
four or more equation signs must be used.

*Example:*

-----
First exercise specification

----

Second exercise specification

====

First exercise in the second section

----

Second exercise in the second section

----

etc.
-----

Blank lines around the separators are omitted.  To have five sections in each
exercise specification file, there must be exactly four section separators.
There is no additional separator after the last exercise specification.  Each
section must contain at least one exercise (technically).


=== Format of an Individual Exercise Specification ===

Each individual exercise specification consists of a header and a series of
tasks.  The header defines some necessary information about the exercise type,
media files it depends on etc.  Tasks define the corresponding questions or
goals depending on the exercise type.

Header and individual tasks are separated by a blank line.  This means that
both header and a task can be defined over multiple lines, but can not contain
blank lines.  For each exercise, there is just one header at the beginning and
an unlimited number of tasks following.

Some tasks are specified by a paragraph-based text.  Line length is unlimited,
but it is recommended to wrap paragraph-based data not to exceed 80 columns
width.  Other tasks expect data in lines, so they can not be wrapped, however
there are usually relatively short pieces of text on each line, so it should
not happen, that you exceed the 80 columns width.

In the example below, you can see a concrete header and tasks for a concrete
exercise type.

*Example:*

-----
type: MulitpleChoiceQuestions
sound_file: conversation1.ogg
transcript: conversation1.txt

What does the woman want to buy?
- Some clothes.
+ Some books.
- Some cakes.

Where does she want to buy the books from?
- Germany.
- England.
+ America.

What does the cashier recommend her to do?
+ Make a transfer.
- Use her credit card.
- Send cash.
-----

=== Exercise Header Format ===

Exercise header consists of name/value pairs written each on one line.  The
header name begins at the beginning of the line and ends by a colon.  The colon
is followed by a space and the corresponding value.

You can see an example of an exercise header at the previous section.  The most
important header item is an exercise type.  You can find a list of possible
exercise types in the section [#exercise-types].

=== Recording Specification ===

Some exercises may be based on a listening.  If this is the case, the following
header arguments must be specified (as you can see in the example above).  
  
  * =sound_file= ... name of the file with the corresponding recording
  * =transcript= ... name of the file with a textual transcript of the recording

If there is no listening related to the exercise, you just omit these
arguments.

=== Exercise Types === exercise-types

The exercise type determines the type of the tasks expected in the source file
after the header and a way of their interpretation.  For each exercise, all the
tasks must be of the same type.  

Exercise Types Overview: @TOC@

A brief description of each exercise type follows.


==== TrueFalseStatements ====

A sequence of statements.  The user is expected to indicate whether the
sentence is true or false.  This is mostly usefull in a combination with a
recording to test the comprehension.

The specification consists of a sentence and a ![T] or ![F] mark at
the end to indicate the correct answer.

*Task specification example:*

-----
The Microsoft Windows operating system never crashes. [F]
-----


==== MultipleChoiceQuestions ==== MultipleChoiceQuestions

A sequence of questions with a predefined set of answers.  Also mostly usefull
as a comprehension exercise (in combination with a recording).

User's goal is to choose the correct answer out of a list of predefined options.
The specification consists of the question (or prompt) and a sequence of
choices.  The question is specified at the first line and all the following
lines are the choices.  Each Choice must be prefixed by a plus or minus sign --
plus for a correct answer, minus for the incorrect ones.  Number of choices is
not limited, but only one choice can be defined as correct.

*Task specification example:*

-----
A screen reader is:
- A person.
- A device.
+ A program.
-----


==== GapFilling ====

Filling in the gaps in sentences by choosing the correct word from the list.

The specification is very similar to the [#MultipleChoiceQuestions]
specification, only instead of questions, there are sentences with gaps.  Each
sentence has just one gap marked by a sequence of four underscores.

*Task specification example:*

-----
If you want to send money to somebody, you can ____ a transfer.
- do
+ make
- have
-----


==== Cloze ==== Cloze

Filling in the gaps in text by typing the correct word.  Since the individual
pieces would often not make sense without the context, the cloze will usually
consist of a paragraph of text which can contain more than one gap.

It is recommended to use a cloze in a combination with a recording, so that the
user's goal is to fill in the exactly same words as he has heard before.  In
this case, there is just one correct answer and the automatical evaluation can
surely decide what is a correct answer and what is not.

You can also use a cloze without a recording, so that the user must find
the correct word according to the lexical context, but there is the risk, that
the student finds a different completion, than you expected, which might be
also correct.  Then the automatic evaluation would evaluate such an answer as
incorrect and the student would be confused.  So please take special care to
make the completions unambiguous.

In the input text, you simply put the words in square brackets to indicate,
that they should be replaced by a gap.  Than the /only/ correct answer for this
gap is the word in the brackets.


*Task specification example:*

-----
Commercial banks and savings banks receive and hold deposits [in] current
accounts, savings accounts and deposit accounts, make payments [for] their
customers, lend money, [and] offer investment advice, foreign exchange
facilities, and so on.
-----


==== Selections ====

The goal in this exercise is to decide which of the two (or possibly more)
sentences is correct.  The specification of one task consists of two (or more)
lines, one of which is marked by a plus sign and the other(s) by a minus sign.
The plus marked sentence is then considered correct and the other(s) incorrect.

*Task specification example:*

-----
+ She asked me to plant some flowers.
- She asked to me to plant some flowers.
-----

==== SentenceCompletion ====

Each task is one sentence.  There is just one gap in each sentence, to be
filled in by the student.  Unlike in the [#Cloze], there are usually more words
in the gap to be filled to finish the sentence.  The same warning applies here
regarding the ambiguity as for the [#Cloze], so it is safer to use this
exercise together with a listening again.

*Task specification example:*

-----
If you don't use pesticides you can [grow organic food].
-----

==== Transformation ====

The goal is to transform a given sentence according to the instructions, which
are a part of this exercise's recording. 

The task specification consists of two lines.  First line is the original
sentence and the second line is the transformed sentence.  The part of the
transformed sentence, which should be replaced by a gap is marked by the square
brackets.  

You can either put the whole transformed sentence into the brackets if you want
the student to fill it in as it is, or provide a part of the transformed
sentence as a template.  This can often help to avoid slightly different, but
still correct, transformations, which would be, however, evaluated as
incorrect.  It also allows the student to concentrate just on the subject of
the transformation and avoids unnecessary typing and risking typos.

*Task specification example:*

-----
Mr Hill said: "I don't grow bananas."
[Mr Hill said he didn't grow bananas.]
-----

*Task specification example with a template:*

-----
Mr Hill said: "I don't grow bananas."
Mr Hill said he [didn't] grow bananas.
-----

When the whole sentence should be filled (the first example), you can omit the
square brackets.  The whole second line will be automatically considered a
fill-in text.

==== Dictation ====

Task specification for dictation is empty, since it is based just on listening
and the transcript of that listening makes the correct answer.  No more
information needed.


== Sound Recordings == recordings

=== Sound File Format ===

All sounds should be recorded digitally in the WAVe format with CD quality.
This means in particular:

  * Two channels (stereo)
  * Sampling frequency 44.1 kHz
  * 16 bits per sample.

These source data will be converted into an applicable output format in
reasonable quality by the technical group.

=== Segmentation ===

Each logical piece should be recorded as a separate file except for vocabulary,
since recording one very short file per one vocab item would be too difficult
and time consuming.

Vocabulary should be recorded into one file per unit.  There should be distinct
pauses between individual vocabulary items (one or two seconds).  These
recordings will be cut into pieces automatically.

All other recordings should be recorded separately -- one file per logical
unit.  For instance there will be one file for each listening exercise etc.

=== Delivery of the Recorded Data ===

The data should be burned on a CD when ready and sent to the technical group,
since it will be probably too large for transmission via the Internet.
