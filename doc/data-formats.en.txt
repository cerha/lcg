# -*- coding: utf-8; mode: structured-text -*-
# Copyright (c) 2005, 2006 Brailcom, o.p.s.
# This is part of the LCG Documentation.
# See the file index.en.txt for copying conditions.

= Input Data Formats =

To be able to process the input data with a computer program (the LCG) we must
define a set of rules how this data are represented.  This chapter describes
the data formats currently used by the LCG.

== Basics ==

All LCG source files are plain text files.  Thus you can edit them using any
text editor.  A simple editor, such as Notepad in MS Windows should do the job.
The only requirement is that you must be able to save the output file in *UTF-8
encoding* or convert it to this encoding afterwards.

LCG also supports other data types within the content, such as sound and video
files, images, scripts etc., but these are not considered /source files/ from
this point of view.  They are called /resources/ in this manual.  To include
such files, you usually refer to them from the source files, so you will also
find the relavant information in the later sections.

The basic concept is based on files arranged into directories (folders)
according to the logical structure of the course.  A custom structure can be
defined for each course.


== Data Format Categories ==

The following data formats can be used:
  * [#plain-text Plain Text]
  * [#structured-text Structured Text]
  * [#vocabulary Vocabulary]
  * [#exercises Exercise Specification]


=== Plain Text === plain-text

This is the simplest format.  This format is only used for texts which don't
require any formatting or other processing.  No higher level constructs are
recognized within plain text.


=== Structured Text === structured-text

Structured text is a very simple and straightforward set of rules how to format
a plain text document.  The formatting allows to mark the logical structure of
sections, paragraphs, bullet lists etc.  A brief description follows.

You will find a brief description of the most useful constructs below.  See the
[formatting] for a complete guide.

Overview: @TOC@


==== Paragraphs ====

A paragraph is each continual set of rows of text.  Whenever you leave a blank
line, you start a new paragraph.  The line-breaks within the paragraph are
ignored, since the paragraph will be reformatted to fit into the browser
window.

It is recommended to wrap the paragraphs not to exceed 80 characters in width.


==== Sections ====

A section starts with a sections header.  The header is marked by a section
title surrounded by the equation signs (at least two).  The number of the
equation signs determines the level.
	 
*Example:*

------
 == This is the main heading ==

 The paragraphs below belong to the first section.

 === Subsection Heading ===

 This paragraph belongs to the subsection of the first section.

 == A second section ==

 This is a second section on the same level as the first one.
----- 

The main purpose of the sections is to have an additional logical structure
within the text sections.  All the sections will appear in the Table of
Contents (reflecting their hierarchy).  Thus sections should be used as much as
possible in the grammar explanations to allow direct access to certain points
from the table of contents.  Also links from within the exercises can be
targeted to a particular subsection of the Grammar section.




==== Bullet Lists ====

Bullet lists are marked by an asterisk at the beginning of each item.  Each
item is indented by a space.

*Example:*

------
 * can
 * may
 * must
------

This is rendered as:

 * can
 * may
 * must

Bullet lists can be nested, you can also make ordered lists etc.  More details
can be found in the [formatting].


==== Field-sets ====

Field-sets are very handy within the exercises for writing down a
conversation. Speaker's name must start the line and is enclosed in colons
from both sides.  The spoken text follows.  When split over multiple lines, all
the subsequent lines must be indented, until the next speaker name appears.

*Example:*

------
:Granny: I thought you told me you'd already made up your mind to do
         accountancy.
:Emma:   I don't know. There are all kinds of other work in finance and I'm not
         sure accounting would be too exciting.
:Granny: Exciting? What you need is a good steady job and a good steady
         boyfriend, my girl. Take my word for it.  Do your accounting course
         then find a good job round here instead of traipsing off to the big
         city. And here's your cup of tea.
:Emma:   Oh, thanks. But Granny, there's more to life than getting married and
	 having babies. And I want to see a bit of the world before I
	 settle down. I've been thinking about private banking ...
------

This is rendered as:

:Granny: I thought you told me you'd already made up your mind to do
         accountancy.
:Emma:   I don't know. There are all kinds of other work in finance and I'm not
         sure accounting would be too exciting.
:Granny: Exciting? What you need is a good steady job and a good steady
         boyfriend, my girl. Take my word for it.  Do your accounting course
         then find a good job round here instead of traipsing off to the big
         city. And here's your cup of tea.
:Emma:   Oh, thanks. But Granny, there's more to life than getting married and
	 having babies. And I want to see a bit of the world before I
	 settle down. I've been thinking about private banking ...

See the [formatting] for a detailed syntax description.


=== Vocabulary === vocabulary

Vocabulary lists are -- quite obviously -- designed for a language course.
Let's suppose we make a course of English language for Spanish learners.

Each vocabulary file consists of word pairs -- the original term and the
translation.  Each pair is on a separate line.  The line starts with the
original term (in English according to the example).  The term may be followed
by a note in round brackets.  The translation follows after the separator "::"
- a double colon.  Blank characters (spaces, tabs) before and after the
separator and at the beginning and end of the line are ignored.

Example (for the English/Spanish course):

-----
busy :: ocupado
call :: llamada 
cell-phone (U.S.) :: teléfono celular
-----

All lines beginning with a hash "#" are comments (ignored).

Sometimes the vocabulary defines also phrases.  The LCG needs to be able to
recognise phrases (they are listed separately).  The phrases can be defined in
one file with "ordinary" vocabulary but must be marked.  

You can either put all the phrases together after a line containing a special
comment "#phrases":

-----
Could you repeat that please? (phr.) :: ¿Podría repitir, por favor? 
to switch off :: apagar
tone :: señal
yellow pages :: páginas amarillas
# phrases
Can I speak to ..? :: ¿Puedo hablar con ... ?
Can I help you? :: ¿Puedo ayudarle?
Can I take a message? :: ¿Puedo tomar algún recado?
-----

Optionally a phrase can be marked using the ``(phr.)'' note at the end of the
phrase like that:

-----
Could you repeat that please? :: ¿Podría repitir, por favor? 
-----


=== Exercise Specification === exercises




==== Exercise Specification File Format ====

The exercise specification consists of a series of specifications of individual
exercises.  The number of exercises is not restricted.  The exercises will be
generated on the output in the same order in which they appear in the
specification file.  The only restriction is, that the exercises must be split
into five sections.  It is in the responsibility of the author to stick to some
rules making the types and number of exercises within each section consistent
throughout the course.

So, technically, the individual exercise specifications are separated by a line
containing four or more dashes.  When the next section begins, a separator of
four or more equation signs must be used.

*Example:*

-----
First exercise specification

----

Second exercise specification

====

First exercise in the second section

----

Second exercise in the second section

----

etc.
-----

Blank lines around the separators are omitted.  To have five sections in each
exercise specification file, there must be exactly four section separators.
There is no additional separator after the last exercise specification.  Each
section must contain at least one exercise (technically).


==== Format of an Individual Exercise Specification ====

Each individual exercise specification consists of a header and one or more
tasks.  The header defines some necessary information about the exercise type,
media files it depends on etc.  Tasks define the corresponding questions or
goals depending on the exercise type.

In the example below, you can see a concrete header and tasks for a concrete
exercise type.

*Example:*

-----
type: MulitpleChoiceQuestions
sound_file: conversation1.ogg
transcript: conversation1.txt

What does the woman want to buy?
- Some clothes.
+ Some books.
- Some cakes.

Where does she want to buy the books from?
- Germany.
- England.
+ America.

What does the cashier recommend her to do?
+ Make a transfer.
- Use her credit card.
- Send cash.
-----

/Details about line length:/ Line length is unlimited, but it is recommended to
wrap the text not to exceed 80 columns width.  However you can only wrap
certain types of lines.  For example exercise header lines can not be wrapped
and also certain types of exercises expect their tasks as distinct lines.
See the exercise format specifications for more details.


==== Exercise Header ====

Exercise header consists of arguments -- name/value pairs written each on one
line.  The header name (at the beginning of the line) is followed by a colon, a
space and the corresponding value (see the example above).

If the value of an argument takes more than one line, an alternate syntax is
allowed.  The value is surrounded by XML-like tags named as the argument.  The
tags must appear alone on separate lines.

*Example*:

------
<instructions>
After talking to her grandmother, Emma sent an email to a friend of hers called
Willy Cookham. Willy was doing a work placement while studying to be a
managerial accountant like his dad Kenny. Emma asked him if he knew how to get
into private banking. Here is Willy's reply. Fill in the gaps:
</instructions>
------

This construct defines the ='instructions'= argument and assigns it a
multi-line value.  All such argument definitions must immediately follow the
one-line argument definitions, leaving a blank line for separation.

Recognized exercise header arguments are:

=type=
   This argument is mandatory.  See the list of all possible [#exercise-types].
  
=instructions=
   This argument allows to override the default (intentionally very general)
   exercise instructions with custom (usually more specific) instructions.
   These instructions are then printed before the exercise task(s) and tell the
   user what is his goal.  It should be a complete sentence (usually starting
   with a capital letter and ending with a dot).  This, in consequence, also
   allows to use the same exercise type for different purposes.

=audio_version=
   Any exercise may also be available in purely oral/aural version.  In such a
   case you supply a name of the file with the corresponding recording.  This
   argument is not mandatory.

=sound_file=
   When the exercises is based on a listening, you specify the name of the file
   with the recording here.  The file is then searched within the ='media'=
   subdirectory of current node's source directory.  This argument is not
   mandatory.

=transcript= 
   The name of the file with a textual transcript of the recording.  This file
   is required to exist whenever the 'sound_file' argument is supplied.  This
   argument, however, is not required when the transcript filename is the same
   as the 'sound_file' filename using the '.txt' extension instead of the
   original sound file extension.  The file is then searched within the
   ='transcripts'= subdirectory of current node's source directory.

=pieces=
   This argument is only valid for the [#Dictation] exercise.  It specifies a
   filename mask for the recording split up to pieces.  These pieces can be
   then replayed by the user on demand (using shortcut keys).  You can have for
   example the recording in a file ='dictation.mp3'= (specified by the
   =sound_file= argument) and you will split this file up to 10 pieces named
   ='dictation-01.mp3'= through ='dictation-10.mp3'=.  Thus you specify the
   =pieces= argument's value as ='dictation-*.mp3'=.  Remember, that the files
   are sorted alphabetically, and name them properly.

=reading= 
   Specifies the reading text, which is displayed at the beginning of the
   exercise.  Some exercise types may require a reading, some may not.  If a
   one-line value is supplied, this is considered a filename.  The file is then
   searched within the ='readings'= subdirectory of current node's source
   directory.  A multi-line value is used as the reading text itself.  The text
   (regardless whether read from file or not) is a [#structured-text].

=explanation= 
   Any exercise can start with a brief explanation (usually of the subject of
   it's tasks).  Explanations are quite similar to readings texts but serve a
   different purpose.  When both are defined, the explanation goes first on the
   output.  They are defined as a multi-line [#structured-text].

=example= 
   A model answer.  If defined, the tasks will be preceded with given example
   (a multi-line [#structured-text]).  The formatting should usually follow the
   formatting of the tasks within the exercise.

/Note:/ The difference between the /recording/ and the /audio version/ should
be obvious.  The user listens to the recording first (if there is one) and than
he decides if he wants to do the written tasks (filling in texts or choosing
from predefined answers interactively) or to do the same tasks purely
aurally/orally (just listening to the questions and answering orally).  That's
also why there is no transcript for the ='audio_version'= argument, since the
interactive version of the exercise also serves as a transcript.


==== Exercise Types ==== exercise-types

The exercise type determines the type of the tasks expected in the source file
after the header and a way of their interpretation.  For each exercise, all the
tasks must be of the same type.  

Exercise Types Overview: @TOC@

A brief description of each exercise type follows.


===== TrueFalseStatements =====

A sequence of statements.  The user is expected to indicate whether the
sentence is true or false.  This is mostly useful in a combination with a
recording to test the comprehension.

The specification consists of a sentence and a \[T] or \[F] mark at
the end to indicate the correct answer.

*Task specification example:*

-----
The Microsoft Windows operating system never crashes. [F]
-----


===== MultipleChoiceQuestions ===== MultipleChoiceQuestions

A sequence of questions with a predefined set of answers.  Also mostly useful
as a comprehension exercise (in combination with a recording).

User's goal is to choose the correct answer out of a list of predefined options.
The specification consists of the question (or prompt) and a sequence of
choices.  The question is specified at the first line and all the following
lines are the choices.  Each Choice must be prefixed by a plus or minus sign --
plus for a correct answer, minus for the incorrect ones.  Number of choices is
not limited, but only one choice can be defined as correct.

*Task specification example:*

-----
A screen reader is:
- A person.
- A device.
+ A program.
-----


===== GapFilling =====

Filling in the gaps in sentences by choosing the correct word from the list.

The specification is very similar to the [#MultipleChoiceQuestions]
specification, only instead of questions, there are sentences with gaps.  Each
sentence has just one gap marked by a sequence of four underscores.

*Task specification example:*

-----
If you want to send money to somebody, you can ____ a transfer.
- do
+ make
- have
-----


===== Cloze ===== Cloze

Filling in the gaps in text by typing the correct word into a text-box.  The
text is a [#structured-text], so you can use any of it's constructs to affect
the formatting.

The gaps are simply done by putting a word or expression into square brackets.
Than the /only/ correct answer for this gap is the word in the brackets.

*Specification example (simple paragraphs of text):*

-----
Commercial banks and savings banks receive and hold deposits [in] current
accounts, savings accounts and deposit accounts, make payments [for] their
customers, lend money, [and] offer investment advice, foreign exchange
facilities, and so on. 

[Many] banks nowadays also offer online banking services. [Some] banks only
have branches in one region or country; large international banks have
[branches] in many countries.
-----

*Specification example (a conversation):*

-----
:Granny: I thought you told me you'd already made up your [mind] to do
         accountancy.
:Emma:   I don't know. There are all kinds of other work in finance and I'm not
         sure accounting would be too [exciting] .
:Granny: Exciting? What you need is a good steady job and a good [steady]
         boyfriend, my girl. Take my word for it.  Do your accounting course
         then find a good job round here instead of traipsing off to the big
         city. And here's your cup of tea.
:Emma:   Oh, thanks. But Granny, there's more to life than getting married and
	 [having] babies. And I want to see a bit of the world before I
	 [settle] down. I've been thinking about private banking ...
-----

This example uses the Field-set construct to format the conversation.  See the
[formatting] for more details.

It is recommended to use a cloze in a combination with a recording, so that the
user's goal is to fill in the exactly same words as he has heard before.  In
this case, there is just one correct answer and the automatic evaluation can
surely decide what is a correct answer and what is not.

You can also use a cloze without a recording, so that the user must find the
correct answer from the context, but there is the risk, that the student finds
a different completion, than you expected, which might be also correct (it
may be possible to understand the same sentence in different ways).  Then the
automatic evaluation would evaluate such an answer as incorrect and the student
would be confused.  So please take special care to make the completions
unambiguous.

Using [#comments comments] is another recommended way of avoiding confusion.
Within a comment, you may even admit other options, but explain why the
suggested one is the best for the situation.


===== ExposedCloze ===== ExposedCloze

This a normal Cloze exercise, but all the used words/expressions are listed at
the beginning of the exercise.  This is useful when we want the user to choose
from a set of predefined answers.  This also avoids the risk of ambiguous
completions.

The task specification is same as for Cloze, since the only difference is in
the output (the list is automatically generated by extracting the correct
completions from the exercise).  The completions are sorted alphabetically on
the output.


===== Selections =====

The goal in this exercise is to decide which of the two (or possibly more)
sentences is correct.  The specification of one task consists of two (or more)
lines, one of which is marked by a plus sign and the other(s) by a minus sign.
The plus marked sentence is then considered correct and the other(s) incorrect.

*Task specification example:*

-----
+ She asked me to plant some flowers.
- She asked to me to plant some flowers.
-----

===== SentenceCompletion =====

Sentence completion exercise is designed to be purely aural/oral so there are
no tasks in the specification file.  On the other hand, the ='audio_version'=
argument is mandatory for that exercise.


===== Transformation =====

The goal is to transform a given sentence according to the instructions (they
should be given using the 'instructions' and/or the 'example' header arguments).

The task specification consists of two lines.  First line is the original
sentence and the second line is the transformed sentence.  The square brackets
can be used within the transformed sentence to mark the part which should be
left out.  If no square brackets are found, the whole sentence will be left out
for completion.

*Task specification example:*

-----
The area you specialise in could be intensive care or theatre work.
The area in [which] you specialise could be intensive care or theatre work.
-----

*Another example (the whole sentence must be filled):*

-----
Mr Hill said: "I don't grow bananas."
Mr Hill said he didn't grow bananas.
-----


===== Substitution =====

This is similar to Transformation, but the goal is to replace a part of the
original sentence with a different pattern.  This pattern is written in round
brackets after the original sentence on the first line.  The second line
contains the answer (substituted sentence).

*Task specification example:*

-----
Can you wait a moment, please? (Take a message.)
Can you take a message, please?
-----

===== Dictation ===== Dictation

Task specification for the dictation is the text of the dictation as one
paragraph of text.  A recording is required for this exercise.  An optional
(but recommanded) argument =pieces= can point to the recording split to pieces.
These pieces can be then replayed separately byt the user while writing down
the dictation text.  See the description of this argument for more details.

==== Exercise comments ==== comments

It may be desirable to add a comment to a task, which explains briefly the
reason why the correct answer is just the one suggested in the task definition.
This is possible for any exercise type easily.  Most exercise types
(except for Cloze), define their tasks as a sequence of individual text
blocks separated by blank lines.  Just add a separate block of text following
any task specification and start it with two dots and a space (='.. '=).  Any
such block is considered a comment for the previous task.

Example of use:

-----
type: TrueFalseStatemnts
reading: 2_text18.txt

The IRS is the American government body in charge of collecting taxes. [T]

The training course is for people who already have a degree in
telecommunications. [F]

.. The text doesn't say that.  You need a degree (or related work experience)
to get employment by IRS.

People who want to do the course must already have excellent computer
skills. [F]

.. The text says ``Functional knowledge of the computer''.

-----

The blank lines between the task and the comment are MANDATORY.

As mentioned above, the notation is different for the [#Cloze] exercise (as
well as [#ExposedCloze]).  Since there are usually several fields within the
cloze text and this text is processed as whole, the comments can be
placed at the very end of exercise specification and must use labels
to refer to a particular field.  The label is enclosed in angle brackets and
must be present at the end of the field and at the beginning of the
corresponding comment.

Example:

-----
:Granny: I thought you told me you'd already made up your [mind<1>] to do
         accountancy.
:Emma:   I don't know. There are all kinds of other work in finance and I'm not
         sure accounting would be too [exciting].
:Granny: Exciting? What you need is a good steady job and a good [steady]
         boyfriend, my girl. Take my word for it.  Do your accounting course
         then find a good job round here instead of traipsing off to the big
         city. And here's your cup of tea.
:Emma:   Oh, thanks. But Granny, there's more to life than getting married and
	 [having<2>] babies. And I want to see a bit of the world before I
	 [settle<3>] down. I've been thinking about private banking ...

.. <1> ``Make up someones mind'' is a fixed expression.

.. <2> Other verbs would make sense here, but ``having'' is the most natural in
this sort of conversation.

.. <3> Again, ``settle down'' is a fixed expression.

-----

Labels can be any combination of letters, numbers and underscores and the order
doesn't have to match the order of the fields.  Fields don't have to be marked,
when there is no comment for them.


