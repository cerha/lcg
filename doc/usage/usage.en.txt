# -*- coding: utf-8; mode: structured-text -*-
# Copyright (c) 2005-2007 Brailcom, o.p.s.
# This is part of the LCG Documentation.
# See the file index.en.txt for copying conditions.

= Using LCG =

This document describes usage of LCG end-user tools, namely the =lcgmake=
program, which is distributred together with LCG and which may be used directly
to generate publications, such as manuals, help systems, e-learning courses etc.

The basic concept is based on files arranged into a directory tree according to
the logical structure of the publication.  The files are read by the LCG and
the corresponding content hierarchy is built in the computer memory in an
independent internal representation.  Then this model is exported into one of
the supported output formats.

The input files are either the actual source documents in the [structured-text]
format or Python files, which may be used for document content construction by
reading the source data from any imaginable source in any possible format.
This makes usage very versatile, however requires some programming and
knowledge of LCG APIs.


Index: @TOC@


== Terminology ==

We use the following terminology in the text below:

Publication
  A general term for the whole hierarchy of documents, which together make the
  manual, e-learning course, help system or whatever you are using the LCG for.

Node 
  A node represents one document within the hierarchy.  This may be a
  chapter of a book, unit of a course or any other logically complete unit of
  the material.  A publication is a hierarchy of nodes.  Each node has a unique
  identifier.

Content
  Each node contains some actual text.  LCG recognizes the logical structure of
  the content.  Thus we have a hierarchy of content elements, such as sections,
  paragraphs, itemized lists, code samples, tables, images etc.


== Organization of the Source Data ==

There is just one /source directory/, which contains files and subdirectories,
which are read recursively.

The following rules apply:

  * The root node is located first.  By default, the root node's identifier is
    'index', but any other id can be passed (see [#run]).
 
  * The list of child nodes is built.  In short, a child node is created for
    each file or directory found in the source directory, which has a
    suitable name (see [#names]).

  * A file represents a leave node (it has no children).  The node's id is the
    base name of this file.  Node's content is read from the file in the
    [structured-text] format.  When multiple language variants of the file
    exist, [#language-selection] is performed.

  * A directory represents a node with children.  The node's id is the name of
    this directory.  The node's content is read from the file of the same name
    within this directory, plus the suffix (e.g. =intro/intro.txt=).  All other
    files and directories within the directory are child nodes of this node.
    The process starts recursively as for the root node.

  * A Python source file represents an extensible reader.  The file must define
    a class named 'Reader', which implements 'lcg.Reader' API.  This reader
    will be instantiated and used to construct the content of the node and may
    also build a sub-hierarchy of nodes.

  * It is possible to enforce the order and visibility of nodes using the
    [#index-file].

Files within the whole directory structure must have unique names, since they
are used as node identifiers.  This also means that it is possible to refer to
any node using it's id, without caring where in the hierarchy it is located.


=== File and Directory Name Restrictions === names

A valid /source directory/ name is any name, which doesn't begin with a dot or
an underscore.  Also 'CVS' directories are ignored.

A valid /source file/ must have the source file suffix.  This is '.txt' by
default, but any other suffix can be passed (see [#run]).  The suffix '.py' is,
however, reserved for Python source files.  Filenames beginning with a dot, an
underscore and ending with a tilde are ignored.


=== Index File === index-file

The nodes are ordered alphabetically by default, but the order can be also
defined explicitly using a file named '\_index.txt', which contains the list of
child node identifiers one per line.  

Nodes, which don't appear in the index file, but for which an input file is
found, are still created, however they are considered "hidden" and thus they
don't appear in the table of contents.

Empty lines and lines beginning with a hash ('#') are ignored.


=== Language Selection === language-selection

If you specify a language, when running LCG, the LCG will try to locate the
input file variant, which matches given language.  Language is specified using
an ISO 639-1 Alpha-2 language code.  The matching input file will have the
corresponding suffix, before the file type suffix.  Thus for example
'index.en.txt' is the preferred input file for the node 'index'.  When no such
file exists, the file 'index.txt' is used.


== Running LCG == run

The /Generic Interface/ is implemented with the =lcgmake.py= program, which
comes with the LCG.  Launch it with the =--help= argument to see the supported
options:

-----
lcgmake.py --help
-----
